# Neural Foundation Model Training Docker Image
# Optimized for distributed training with CUDA support

FROM nvidia/cuda:11.8-devel-ubuntu20.04

# Avoid interactive prompts during build
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3.9 \
    python3.9-dev \
    python3-pip \
    git \
    wget \
    curl \
    build-essential \
    cmake \
    pkg-config \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libgtk-3-dev \
    libatlas-base-dev \
    gfortran \
    libhdf5-dev \
    libfftw3-dev \
    liblapack-dev \
    libblas-dev \
    libopenmpi-dev \
    openssh-client \
    rsync \
    vim \
    htop \
    tmux \
    && rm -rf /var/lib/apt/lists/*

# Set Python 3.9 as default
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 1
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.9 1

# Install pip and upgrade
RUN python3 -m pip install --upgrade pip setuptools wheel

# Install PyTorch with CUDA support
RUN pip3 install torch==2.1.0 torchvision==0.16.0 torchaudio==2.1.0 --index-url https://download.pytorch.org/whl/cu118

# Install additional ML libraries
RUN pip3 install \
    transformers==4.35.0 \
    accelerate==0.24.0 \
    deepspeed==0.12.0 \
    ray[tune]==2.8.0 \
    wandb==0.16.0 \
    mlflow==2.8.0 \
    hydra-core==1.3.0 \
    omegaconf==2.3.0

# Install neural data processing libraries
RUN pip3 install \
    mne==1.5.0 \
    neo==0.12.0 \
    elephant==0.14.0 \
    pynapple==0.6.0 \
    spikeinterface==0.99.0 \
    braindecode==0.8.0

# Install scientific computing libraries
RUN pip3 install \
    numpy==1.24.0 \
    scipy==1.11.0 \
    pandas==2.1.0 \
    scikit-learn==1.3.0 \
    h5py==3.9.0 \
    zarr==2.16.0 \
    dask[complete]==2023.10.0

# Install privacy libraries
RUN pip3 install \
    opacus==1.4.0 \
    cryptography==41.0.0 \
    differential-privacy==1.1.5

# Install monitoring and utilities
RUN pip3 install \
    prometheus-client==0.18.0 \
    tensorboard==2.15.0 \
    tqdm==4.66.0 \
    rich==13.6.0 \
    click==8.1.0

# Install development tools
RUN pip3 install \
    pytest==7.4.0 \
    black==23.9.0 \
    isort==5.12.0 \
    mypy==1.6.0 \
    pre-commit==3.5.0

# Set working directory
WORKDIR /workspace

# Copy requirements and install project dependencies
COPY requirements.txt .
RUN pip3 install -r requirements.txt

# Copy source code
COPY . .

# Install the package in development mode
RUN pip3 install -e .

# Create directories for data and outputs
RUN mkdir -p /workspace/data /workspace/outputs /workspace/checkpoints /workspace/logs

# Set environment variables
ENV PYTHONPATH="/workspace/src:${PYTHONPATH}"
ENV CUDA_VISIBLE_DEVICES="0,1,2,3,4,5,6,7"
ENV NCCL_DEBUG=INFO
ENV NCCL_SOCKET_IFNAME=eth0
ENV NCCL_IB_DISABLE=1

# Configure distributed training
ENV MASTER_ADDR=localhost
ENV MASTER_PORT=12355
ENV WORLD_SIZE=1
ENV RANK=0

# Create non-root user for security
RUN useradd -m -s /bin/bash neural_user && \
    chown -R neural_user:neural_user /workspace
USER neural_user

# Expose ports for distributed training and monitoring
EXPOSE 12355 8080 6006 8888

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python3 -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}, Devices: {torch.cuda.device_count()}')" || exit 1

# Default command
CMD ["python3", "scripts/train_foundation_model.py", "--config", "configs/training/foundation_model.yaml"]